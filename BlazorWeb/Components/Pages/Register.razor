@page "/register"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Application.Interfaces
@using Domain.Entities
@using Domain.Enum
@inject IUserService UserService
@inject NavigationManager NavigationManager
@layout UserRegisterLayout

<h3>Registracija</h3>

<EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="username">Korisničko ime:</label>
        <InputText id="username" @bind-Value="registerModel.UserName" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="password">Lozinka:</label>
        <InputText id="password" @bind-Value="registerModel.Password" type="password" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="confirmPassword">Ponovi lozinku:</label>
        <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" type="password" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="birthday">Datum rođenja:</label>
        <InputDate id="birthday" @bind-Value="registerModel.Birthday" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="gender">Spol:</label>
        <InputSelect id="gender" @bind-Value="registerModel.Gender" class="form-control">
            <option value="@Gender.Male">Muško</option>
            <option value="@Gender.Female">Žensko</option>
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Registriraj se</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            var user = new User
                {
                    UserName = registerModel.UserName,
                    Email = registerModel.Email,
                    Gender = registerModel.Gender,
                    Birthday = registerModel.Birthday,
                    Role = Role.User
                };

            await UserService.CreateUserAsync(user, registerModel.Password);
            NavigationManager.NavigateTo("/plan");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Korisničko ime je obavezno")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email je obavezan")]
        [EmailAddress(ErrorMessage = "Neispravan format emaila")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Lozinka je obavezna")]
        [MinLength(6, ErrorMessage = "Lozinka mora imati najmanje 6 znakova")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Ponavljanje lozinke je obavezno")]
        [Compare("Password", ErrorMessage = "Lozinke se ne podudaraju")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Rođendan je obavezan")]
        public DateOnly Birthday { get; set; }

        public Gender Gender { get; set; }
    }
}