@page "/plan"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Application.Interfaces
@using Domain.Entities
@using Domain.Enum
@inject IUserService UserService
@inject NavigationManager NavigationManager
@layout UserRegisterLayout

<h3>Make Workout Plan</h3>

<EditForm Model="@workoutPlanModel" OnValidSubmit="HandleWorkoutPlan">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="lifestyleType">Current Lifestyle:</label>
        <InputSelect id="lifestyleType" class="form-control" @bind-Value="workoutPlanModel.LifestyleType">
            <option value="">Select lifestyle type</option>
            <option value="Sedentary">Sedentary</option>
            <option value="Neutral">Neutral</option>
            <option value="Active">Active</option>
        </InputSelect>
        <ValidationMessage For="@(() => workoutPlanModel.LifestyleType)" />
    </div>

    <div class="form-group mb-3">
        <label for="targetWeight">Target Weight (kg):</label>
        <InputNumber id="targetWeight" class="form-control" @bind-Value="workoutPlanModel.TargetWeight" />
        <ValidationMessage For="@(() => workoutPlanModel.TargetWeight)" />
    </div>

    <div class="form-group mb-3">
        <label for="height">Visina (cm):</label>
        <InputNumber id="height" @bind-Value="workoutPlanModel.TargetHeight" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="trainingDuration">Daily Training Duration (minutes):</label>
        <InputNumber id="trainingDuration" class="form-control" @bind-Value="workoutPlanModel.TrainingDuration" />
        <ValidationMessage For="@(() => workoutPlanModel.TrainingDuration)" />
    </div>

    <div class="form-group mb-3">
        <label for="trainingDays">Training Days Per Week:</label>
        <InputNumber id="trainingDays" class="form-control" @bind-Value="workoutPlanModel.TrainingDays" />
        <ValidationMessage For="@(() => workoutPlanModel.TrainingDays)" />
    </div>

    <div class="form-group mb-3">
        <label for="healthIssues">Health Issues (if any):</label>
        <InputTextArea id="healthIssues" class="form-control" @bind-Value="workoutPlanModel.HealthIssues" />
        <ValidationMessage For="@(() => workoutPlanModel.HealthIssues)" />
    </div>

    <div class="form-group mb-3">
        <label for="dietType">Diet Type:</label>
        <InputSelect id="dietType" class="form-control" @bind-Value="workoutPlanModel.DietType">
            <option value="">Select diet type</option>
            <option value="@DietType.Omnivore">Omnivore</option>
            <option value="@DietType.Vegeterian">Vegetarian</option>
            <option value="@DietType.Vegan">Vegan</option>
        </InputSelect>
        <ValidationMessage For="@(() => workoutPlanModel.DietType)" />
    </div>

    <div class="form-group mb-3">
        <label for="planType">Plan Type:</label>
        <InputSelect id="planType" class="form-control" @bind-Value="workoutPlanModel.PlanType">
            <option value="">Select plan type</option>
            <option value="@WorkoutPlanType.Base">Base</option>
            <option value="@WorkoutPlanType.Premium">Premium</option>
        </InputSelect>
        <ValidationMessage For="@(() => workoutPlanModel.PlanType)" />
    </div>

    <button type="submit" class="btn btn-primary">Make my plan</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    private WorkoutPlanModel workoutPlanModel = new WorkoutPlanModel();
    private string errorMessage = string.Empty;

    private async Task HandleWorkoutPlan()
    {
        try
        {
            NavigationManager.NavigateTo("/UserLogin");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public class WorkoutPlanModel
    {
        [Required(ErrorMessage = "Please select your lifestyle type")]
        public string LifestyleType { get; set; }

        [Required(ErrorMessage = "Target weight is required")]
        [Range(30, 200, ErrorMessage = "Target weight must be between 30 and 200 kg")]
        public float TargetWeight { get; set; }

        [Required(ErrorMessage = "Target Height is required")]
        [Range(50, 250, ErrorMessage = "Target height must be between50 i 250 cm")]
        public float TargetHeight { get; set; }

        [Required(ErrorMessage = "Training duration is required")]
        [Range(10, 60, ErrorMessage = "Training duration must be between 10 and 60 minutes")]
        public int TrainingDuration { get; set; }

        [Required(ErrorMessage = "Number of training days is required")]
        [Range(1, 7, ErrorMessage = "Training days must be between 1 and 7")]
        public int TrainingDays { get; set; }

        public string HealthIssues { get; set; }

        [Required(ErrorMessage = "Diet type is required")]
        public DietType DietType { get; set; }

        [Required(ErrorMessage = "Plan type is required")]
        public WorkoutPlanType PlanType { get; set; }
    }
}