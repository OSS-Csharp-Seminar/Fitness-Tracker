@page "/progress/my-plan"
@rendermode InteractiveServer
@using Application.Interfaces
@using Domain.Entities
@using Domain.Enum
@inject IWorkoutService WorkoutService
@inject IWorkoutPlanService WorkoutPlanService
@inject IUserService UserService
@inject NavigationManager NavigationManager
@layout UserLoginLayout

<PageTitle>My Workout Plan - PushApps</PageTitle>

<div class="row">
    <div class="col-12">
        <h3 style="color:black; font-weight:bold">My Workout Plan</h3>
        <p class="text-muted">Overview of your current fitness journey</p>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading your workout plan...</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <h5>Error</h5>
        <p>@errorMessage</p>
        <button class="btn btn-primary" @onclick="LoadPlanData">Reload</button>
    </div>
}
else if (currentPlan == null)
{
    <div class="alert alert-warning text-center">
        <h5><i class="fas fa-exclamation-triangle"></i> No Active Workout Plan</h5>
        <p>You don't have an active workout plan yet. Create one to start your fitness journey!</p>
        <button class="btn btn-success btn-lg" @onclick="CreateNewPlan">
            <i class="fas fa-plus"></i> Create Workout Plan
        </button>
    </div>
}
else
{
    <!-- Plan Overview Card -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 style="color:black; font-weight:bold">
                        <i class="fas fa-dumbbell"></i> Current Plan Overview
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label class="form-label text-muted">Started:</label>
                            <p style="color:black; font-weight:bold">@currentPlan.StartDate.ToString("MMM dd, yyyy")</p>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label text-muted">Target Weight:</label>
                            <p style="color:black; font-weight:bold">@currentPlan.TargetWeight kg</p>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label text-muted">Training Days:</label>
                            <p style="color:black; font-weight:bold">@currentPlan.TrainingDays days/week</p>
                        </div>
                    </div>
                    <div class="text-center">
                        <div class="badge bg-primary fs-6 p-2">@daysSinceStart Days Active</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Simple Statistics -->
    <div class="row mb-4">
        <div class="col-md-6 mb-3">
            <div class="card h-100">
                <div class="card-body text-center">
                    <h2 style="color:black; font-weight:bold">@totalWorkouts</h2>
                    <p class="text-muted">Workouts Completed</p>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-3">
            <div class="card h-100">
                <div class="card-body text-center">
                    <h2 style="color:black; font-weight:bold">@totalDurationFormatted</h2>
                    <p class="text-muted">Total Time</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Weekly Progress -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6 style="color:black; font-weight:bold">
                        <i class="fas fa-chart-line"></i> Weekly Progress
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row text-center mb-3">
                        <div class="col-6">
                            <div class="h3" style="color:black; font-weight:bold">@thisWeekWorkouts</div>
                            <small class="text-muted">This Week</small>
                        </div>
                        <div class="col-6">
                            <div class="h3" style="color:black; font-weight:bold">@currentPlan.TrainingDays</div>
                            <small class="text-muted">Target/Week</small>
                        </div>
                    </div>
                    <div class="progress mb-2" style="height: 15px;">
                        <div class="progress-bar bg-success"
                             style="width: @weeklyProgressPercentage%">
                            @weeklyProgressPercentage%
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Training Schedule -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6 style="color:black; font-weight:bold">
                        <i class="fas fa-calendar-week"></i> Your Training Schedule
                    </h6>
                </div>
                <div class="card-body">
                    <p class="text-muted">Training @currentPlan.TrainingDays days per week:</p>
                    <div class="d-flex flex-wrap gap-2 mb-3">
                        @foreach (var day in trainingDays)
                        {
                            <span class="badge bg-secondary p-2" style="color:black">@day</span>
                        }
                    </div>
                    @if (trainingDays.Contains(DateTime.Now.DayOfWeek.ToString()))
                    {
                        <div class="alert alert-success">
                            <strong>Today is a training day! Ready to workout?</strong>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <strong>Today is a rest day. Recovery is important too!</strong>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    public string? UserId { get; set; }

    [SupplyParameterFromQuery]
    public string? UserName { get; set; }

    private User currentUser = null;
    private WorkoutPlan currentPlan = null;
    private List<Workout> completedWorkouts = new List<Workout>();
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    private int totalWorkouts = 0;
    private string totalDurationFormatted = "0:00h";
    private int thisWeekWorkouts = 0;
    private int daysSinceStart = 0;
    private int weeklyProgressPercentage = 0;
    private List<string> trainingDays = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        await LoadPlanData();
    }

    private async Task LoadPlanData()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // Load user
            if (!string.IsNullOrEmpty(UserId) && Guid.TryParse(UserId, out var userGuid))
            {
                currentUser = await UserService.GetByIdAsync(userGuid);
            }
            else
            {
                var uri = new Uri(NavigationManager.Uri);
                var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

                if (query.TryGetValue("userId", out var userIdValue) && Guid.TryParse(userIdValue, out userGuid))
                {
                    currentUser = await UserService.GetByIdAsync(userGuid);
                }
                else
                {
                    errorMessage = "User not found. Please log in again.";
                    return;
                }
            }

            if (currentUser != null)
            {
                // Get current plan
                var userPlans = await WorkoutPlanService.GetByUser(currentUser);
                currentPlan = userPlans.OrderByDescending(p => p.StartDate).FirstOrDefault();

                if (currentPlan != null)
                {
                    // Get completed workouts
                    completedWorkouts = await WorkoutService.GetCompletedWorkouts(currentUser);

                    CalculateStatistics();
                    CalculateTrainingDays();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading plan data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateStatistics()
    {
        // Basic stats
        totalWorkouts = completedWorkouts.Count;

        // Total duration
        var totalMinutes = completedWorkouts.Sum(w => w.Duration.TotalMinutes);
        var hours = (int)(totalMinutes / 60);
        var minutes = (int)(totalMinutes % 60);
        totalDurationFormatted = $"{hours}:{minutes:D2}h";

        // This week workouts
        var startOfWeek = DateTime.Now.AddDays(-(int)DateTime.Now.DayOfWeek);
        thisWeekWorkouts = completedWorkouts.Count(w => w.Date >= DateOnly.FromDateTime(startOfWeek));

        // Weekly progress percentage
        if (currentPlan != null && currentPlan.TrainingDays > 0)
        {
            weeklyProgressPercentage = Math.Min(100, (thisWeekWorkouts * 100) / currentPlan.TrainingDays);
        }

        // Days since start
        if (currentPlan != null)
        {
            daysSinceStart = (DateTime.Now - currentPlan.StartDate).Days;
        }
    }

    private void CalculateTrainingDays()
    {
        if (currentPlan == null) return;

        trainingDays = new List<string>();

        switch (currentPlan.TrainingDays)
        {
            case 1:
                trainingDays.Add("Monday");
                break;
            case 2:
                trainingDays.AddRange(new[] { "Monday", "Thursday" });
                break;
            case 3:
                trainingDays.AddRange(new[] { "Monday", "Wednesday", "Friday" });
                break;
            case 4:
                trainingDays.AddRange(new[] { "Monday", "Tuesday", "Thursday", "Friday" });
                break;
            case 5:
                trainingDays.AddRange(new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" });
                break;
            case 6:
                trainingDays.AddRange(new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" });
                break;
            case 7:
                trainingDays.AddRange(new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" });
                break;
        }
    }

    private void CreateNewPlan()
    {
        NavigationManager.NavigateTo($"/my-plan/create-plan?userId={currentUser?.Id}&userName={UserName}");
    }
}